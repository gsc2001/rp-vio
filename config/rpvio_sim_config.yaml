%YAML:1.0

#common parameters
imu_topic: "/imu_throttled"
image_topic: "/image"
mask_topic: "/mask"
output_path: "/home/user/output/"

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 640
image_height: 480
distortion_parameters:
   k1: 0
   k2: 0
   p1: 0
   p2: 0
projection_parameters:
   fx: 320
   fy: 320
   cx: 320
   cy: 240

estimate_extrinsic: 0
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [0,0,1,1,0,0,0,1,0]

#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.50, 0, 0]

#feature traker parameters
max_cnt: 250            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
H_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04   # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#discrete-time imu noise parameters       
acc_n: 0.074427240     # accelerometer measurement noise standard deviation.
gyr_n: 0.002759607     # gyroscope measurement noise standard deviation.
acc_w: 3.9471004e-7    # accelerometer bias random work noise standard deviation.
gyr_w: 3.1538983e-8    # gyroscope bias random work noise standard deviation.
g_norm: 9.80665        # gravity magnitude

#unsynchronization parameters
estimate_td: 0                  
td: -0.03079132514112524        # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
